{
  "uid" : "6c52eff7ca1c62ce",
  "name" : "test_open_url[/documents/]",
  "fullName" : "tests.main_page_test.TestMainPageSmoke#test_open_url",
  "historyId" : "2ad0a7ff32e6492aac7385284a6be893",
  "time" : {
    "start" : 1731411756146,
    "stop" : 1731411756146,
    "duration" : 0
  },
  "status" : "broken",
  "statusMessage" : "selenium.common.exceptions.InvalidArgumentException: Message: invalid argument\n  (Session info: chrome=130.0.6723.91)\nStacktrace:\n#0 0x56081b84a13a <unknown>\n#1 0x56081b3652bd <unknown>\n#2 0x56081b34d16f <unknown>\n#3 0x56081b34b7c8 <unknown>\n#4 0x56081b34beba <unknown>\n#5 0x56081b367d59 <unknown>\n#6 0x56081b3f5645 <unknown>\n#7 0x56081b3d6012 <unknown>\n#8 0x56081b3f4af6 <unknown>\n#9 0x56081b3d5db3 <unknown>\n#10 0x56081b3a4c10 <unknown>\n#11 0x56081b3a5bee <unknown>\n#12 0x56081b8163cb <unknown>\n#13 0x56081b81a368 <unknown>\n#14 0x56081b803eec <unknown>\n#15 0x56081b81aee7 <unknown>\n#16 0x56081b7e913f <unknown>\n#17 0x56081b838858 <unknown>\n#18 0x56081b838a20 <unknown>\n#19 0x56081b848fb6 <unknown>\n#20 0x7fa3d7294ac3 <unknown>",
  "statusTrace" : "driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"c44053b5684cf2e7c5d46fe5a43cf056\")>\n\n    @pytest.fixture\n    def auth_user_admin(driver):\n        main_page = MainPage(driver)\n        url = Urls.MAIN_URL + Urls.AUTH\n        cookies = {'name': 'token', 'value': os.environ[\"PROD_ADMIN\"]}\n>       driver.get(url)\n\ntests/conftest.py:42: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/hostedtoolcache/Python/3.12.7/x64/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:356: in get\n    self.execute(Command.GET, {\"url\": url})\n/opt/hostedtoolcache/Python/3.12.7/x64/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:347: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7fc907e0c710>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"invalid argument\",\"message\":\"invalid argument\\\\n  (Session info: chrome=1...\\\\n#18 0x56081b838a20 \\\\u003Cunknown>\\\\n#19 0x56081b848fb6 \\\\u003Cunknown>\\\\n#20 0x7fa3d7294ac3 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.InvalidArgumentException: Message: invalid argument\nE         (Session info: chrome=130.0.6723.91)\nE       Stacktrace:\nE       #0 0x56081b84a13a <unknown>\nE       #1 0x56081b3652bd <unknown>\nE       #2 0x56081b34d16f <unknown>\nE       #3 0x56081b34b7c8 <unknown>\nE       #4 0x56081b34beba <unknown>\nE       #5 0x56081b367d59 <unknown>\nE       #6 0x56081b3f5645 <unknown>\nE       #7 0x56081b3d6012 <unknown>\nE       #8 0x56081b3f4af6 <unknown>\nE       #9 0x56081b3d5db3 <unknown>\nE       #10 0x56081b3a4c10 <unknown>\nE       #11 0x56081b3a5bee <unknown>\nE       #12 0x56081b8163cb <unknown>\nE       #13 0x56081b81a368 <unknown>\nE       #14 0x56081b803eec <unknown>\nE       #15 0x56081b81aee7 <unknown>\nE       #16 0x56081b7e913f <unknown>\nE       #17 0x56081b838858 <unknown>\nE       #18 0x56081b838a20 <unknown>\nE       #19 0x56081b848fb6 <unknown>\nE       #20 0x7fa3d7294ac3 <unknown>\n\n/opt/hostedtoolcache/Python/3.12.7/x64/lib/python3.12/site-packages/selenium/webdriver/remote/errorhandler.py:229: InvalidArgumentException",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "auth_user_admin",
    "time" : {
      "start" : 1731411756449,
      "stop" : 1731411756461,
      "duration" : 12
    },
    "status" : "broken",
    "statusMessage" : "selenium.common.exceptions.InvalidArgumentException: Message: invalid argument\n  (Session info: chrome=130.0.6723.91)\nStacktrace:\n#0 0x56081b84a13a <unknown>\n#1 0x56081b3652bd <unknown>\n#2 0x56081b34d16f <unknown>\n#3 0x56081b34b7c8 <unknown>\n#4 0x56081b34beba <unknown>\n#5 0x56081b367d59 <unknown>\n#6 0x56081b3f5645 <unknown>\n#7 0x56081b3d6012 <unknown>\n#8 0x56081b3f4af6 <unknown>\n#9 0x56081b3d5db3 <unknown>\n#10 0x56081b3a4c10 <unknown>\n#11 0x56081b3a5bee <unknown>\n#12 0x56081b8163cb <unknown>\n#13 0x56081b81a368 <unknown>\n#14 0x56081b803eec <unknown>\n#15 0x56081b81aee7 <unknown>\n#16 0x56081b7e913f <unknown>\n#17 0x56081b838858 <unknown>\n#18 0x56081b838a20 <unknown>\n#19 0x56081b848fb6 <unknown>\n#20 0x7fa3d7294ac3 <unknown>\n\n",
    "statusTrace" : "  File \"/opt/hostedtoolcache/Python/3.12.7/x64/lib/python3.12/site-packages/pluggy/_callers.py\", line 167, in _multicall\n    teardown.throw(outcome._exception)\n  File \"/opt/hostedtoolcache/Python/3.12.7/x64/lib/python3.12/site-packages/_pytest/setuponly.py\", line 36, in pytest_fixture_setup\n    return (yield)\n            ^^^^^\n  File \"/opt/hostedtoolcache/Python/3.12.7/x64/lib/python3.12/site-packages/pluggy/_callers.py\", line 103, in _multicall\n    res = hook_impl.function(*args)\n          ^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.12.7/x64/lib/python3.12/site-packages/_pytest/fixtures.py\", line 1140, in pytest_fixture_setup\n    result = call_fixture_func(fixturefunc, request, kwargs)\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.12.7/x64/lib/python3.12/site-packages/_pytest/fixtures.py\", line 917, in call_fixture_func\n    fixture_result = fixturefunc(**kwargs)\n                     ^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/work/DealerPassport/DealerPassport/tests/conftest.py\", line 42, in auth_user_admin\n    driver.get(url)\n  File \"/opt/hostedtoolcache/Python/3.12.7/x64/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py\", line 356, in get\n    self.execute(Command.GET, {\"url\": url})\n  File \"/opt/hostedtoolcache/Python/3.12.7/x64/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py\", line 347, in execute\n    self.error_handler.check_response(response)\n  File \"/opt/hostedtoolcache/Python/3.12.7/x64/lib/python3.12/site-packages/selenium/webdriver/remote/errorhandler.py\", line 229, in check_response\n    raise exception_class(message, screen, stacktrace)\n",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  }, {
    "name" : "clear_allure_results_folder",
    "time" : {
      "start" : 1731411751882,
      "stop" : 1731411751883,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "driver",
    "time" : {
      "start" : 1731411756147,
      "stop" : 1731411756449,
      "duration" : 302
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "afterStages" : [ {
    "name" : "driver::0",
    "time" : {
      "start" : 1731411756495,
      "stop" : 1731411756557,
      "duration" : 62
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "labels" : [ {
    "name" : "epic",
    "value" : "Тестирование главной страницы"
  }, {
    "name" : "tag",
    "value" : "smoke_test"
  }, {
    "name" : "parentSuite",
    "value" : "tests"
  }, {
    "name" : "suite",
    "value" : "main_page_test"
  }, {
    "name" : "subSuite",
    "value" : "TestMainPageSmoke"
  }, {
    "name" : "host",
    "value" : "fv-az773-327"
  }, {
    "name" : "thread",
    "value" : "2230-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "tests.main_page_test"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "url",
    "value" : "'/documents/'"
  } ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "history" : {
      "statistic" : {
        "failed" : 0,
        "broken" : 2,
        "skipped" : 0,
        "passed" : 0,
        "unknown" : 0,
        "total" : 2
      },
      "items" : [ {
        "uid" : "d1e2c1f824c2020e",
        "reportUrl" : "https://Nat754.github.io/DealerPassport/13//#testresult/d1e2c1f824c2020e",
        "status" : "broken",
        "statusDetails" : "selenium.common.exceptions.InvalidArgumentException: Message: invalid argument\n  (Session info: chrome=130.0.6723.91)\nStacktrace:\n#0 0x562bb5f2813a <unknown>\n#1 0x562bb5a432bd <unknown>\n#2 0x562bb5a2b16f <unknown>\n#3 0x562bb5a297c8 <unknown>\n#4 0x562bb5a29eba <unknown>\n#5 0x562bb5a45d59 <unknown>\n#6 0x562bb5ad3645 <unknown>\n#7 0x562bb5ab4012 <unknown>\n#8 0x562bb5ad2af6 <unknown>\n#9 0x562bb5ab3db3 <unknown>\n#10 0x562bb5a82c10 <unknown>\n#11 0x562bb5a83bee <unknown>\n#12 0x562bb5ef43cb <unknown>\n#13 0x562bb5ef8368 <unknown>\n#14 0x562bb5ee1eec <unknown>\n#15 0x562bb5ef8ee7 <unknown>\n#16 0x562bb5ec713f <unknown>\n#17 0x562bb5f16858 <unknown>\n#18 0x562bb5f16a20 <unknown>\n#19 0x562bb5f26fb6 <unknown>\n#20 0x7f325ca94ac3 <unknown>",
        "time" : {
          "start" : 1731410913664,
          "stop" : 1731410913664,
          "duration" : 0
        }
      } ]
    },
    "tags" : [ "smoke_test" ]
  },
  "source" : "6c52eff7ca1c62ce.json",
  "parameterValues" : [ "'/documents/'" ]
}