{
  "uid" : "7aa16a7681354b87",
  "name" : "Проверка корректности перехода по ссылке Редактор СЕО",
  "fullName" : "tests.main_page_test.TestMainPageRegression#test_clickable_and_redirect_button_editor",
  "historyId" : "76de604a0942f1ca43f9688ecff35184",
  "time" : {
    "start" : 1723428854725,
    "stop" : 1723428854725,
    "duration" : 0
  },
  "status" : "broken",
  "statusMessage" : "selenium.common.exceptions.InvalidCookieDomainException: Message: invalid cookie domain\n  (Session info: chrome-headless-shell=127.0.6533.88)\nStacktrace:\n#0 0x556fc85a671a <unknown>\n#1 0x556fc8277481 <unknown>\n#2 0x556fc8319e51 <unknown>\n#3 0x556fc82e98e2 <unknown>\n#4 0x556fc830808a <unknown>\n#5 0x556fc82e9683 <unknown>\n#6 0x556fc82b9d71 <unknown>\n#7 0x556fc82ba7de <unknown>\n#8 0x556fc856e2ab <unknown>\n#9 0x556fc8572242 <unknown>\n#10 0x556fc855b665 <unknown>\n#11 0x556fc8572dd2 <unknown>\n#12 0x556fc85402af <unknown>\n#13 0x556fc8595eb8 <unknown>\n#14 0x556fc8596090 <unknown>\n#15 0x556fc85a54ec <unknown>\n#16 0x7f4bb4894ac3 <unknown>",
  "statusTrace" : "driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"0c481c5c9e6e30f4d4d3f506673108f3\")>\n\n    @pytest.fixture\n    def auth_user_admin_to_seo_prod(driver):\n        main_page = MainPage(driver)\n        url = Urls.MAIN_URL_SEO_PROD + Urls.AUTH\n        cookies = {'name': 'token', 'value': os.environ[\"SEO_ADMIN\"]}\n        driver.get(url)\n>       driver.add_cookie(cookies)\n\ntests/conftest.py:28: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:636: in add_cookie\n    self.execute(Command.ADD_COOKIE, {\"cookie\": cookie_dict})\n/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:347: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f04e1a3c680>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"invalid cookie domain\",\"message\":\"invalid cookie domain\\\\n  (Session info...\\\\n#14 0x556fc8596090 \\\\u003Cunknown>\\\\n#15 0x556fc85a54ec \\\\u003Cunknown>\\\\n#16 0x7f4bb4894ac3 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.InvalidCookieDomainException: Message: invalid cookie domain\nE         (Session info: chrome-headless-shell=127.0.6533.88)\nE       Stacktrace:\nE       #0 0x556fc85a671a <unknown>\nE       #1 0x556fc8277481 <unknown>\nE       #2 0x556fc8319e51 <unknown>\nE       #3 0x556fc82e98e2 <unknown>\nE       #4 0x556fc830808a <unknown>\nE       #5 0x556fc82e9683 <unknown>\nE       #6 0x556fc82b9d71 <unknown>\nE       #7 0x556fc82ba7de <unknown>\nE       #8 0x556fc856e2ab <unknown>\nE       #9 0x556fc8572242 <unknown>\nE       #10 0x556fc855b665 <unknown>\nE       #11 0x556fc8572dd2 <unknown>\nE       #12 0x556fc85402af <unknown>\nE       #13 0x556fc8595eb8 <unknown>\nE       #14 0x556fc8596090 <unknown>\nE       #15 0x556fc85a54ec <unknown>\nE       #16 0x7f4bb4894ac3 <unknown>\n\n/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/site-packages/selenium/webdriver/remote/errorhandler.py:229: InvalidCookieDomainException",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "driver",
    "time" : {
      "start" : 1723428854725,
      "stop" : 1723428854926,
      "duration" : 201
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "auth_user_admin_to_seo_prod",
    "time" : {
      "start" : 1723428854926,
      "stop" : 1723428855285,
      "duration" : 359
    },
    "status" : "broken",
    "statusMessage" : "selenium.common.exceptions.InvalidCookieDomainException: Message: invalid cookie domain\n  (Session info: chrome-headless-shell=127.0.6533.88)\nStacktrace:\n#0 0x556fc85a671a <unknown>\n#1 0x556fc8277481 <unknown>\n#2 0x556fc8319e51 <unknown>\n#3 0x556fc82e98e2 <unknown>\n#4 0x556fc830808a <unknown>\n#5 0x556fc82e9683 <unknown>\n#6 0x556fc82b9d71 <unknown>\n#7 0x556fc82ba7de <unknown>\n#8 0x556fc856e2ab <unknown>\n#9 0x556fc8572242 <unknown>\n#10 0x556fc855b665 <unknown>\n#11 0x556fc8572dd2 <unknown>\n#12 0x556fc85402af <unknown>\n#13 0x556fc8595eb8 <unknown>\n#14 0x556fc8596090 <unknown>\n#15 0x556fc85a54ec <unknown>\n#16 0x7f4bb4894ac3 <unknown>\n\n",
    "statusTrace" : "  File \"/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/site-packages/pluggy/_callers.py\", line 167, in _multicall\n    teardown.throw(outcome._exception)\n  File \"/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/site-packages/_pytest/setuponly.py\", line 36, in pytest_fixture_setup\n    return (yield)\n            ^^^^^\n  File \"/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/site-packages/pluggy/_callers.py\", line 103, in _multicall\n    res = hook_impl.function(*args)\n          ^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/site-packages/_pytest/fixtures.py\", line 1140, in pytest_fixture_setup\n    result = call_fixture_func(fixturefunc, request, kwargs)\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/site-packages/_pytest/fixtures.py\", line 917, in call_fixture_func\n    fixture_result = fixturefunc(**kwargs)\n                     ^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/work/DealerPassport/DealerPassport/tests/conftest.py\", line 28, in auth_user_admin_to_seo_prod\n    driver.add_cookie(cookies)\n  File \"/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py\", line 636, in add_cookie\n    self.execute(Command.ADD_COOKIE, {\"cookie\": cookie_dict})\n  File \"/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py\", line 347, in execute\n    self.error_handler.check_response(response)\n  File \"/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/site-packages/selenium/webdriver/remote/errorhandler.py\", line 229, in check_response\n    raise exception_class(message, screen, stacktrace)\n",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  }, {
    "name" : "clear_allure_results_folder",
    "time" : {
      "start" : 1723428577028,
      "stop" : 1723428577028,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "afterStages" : [ {
    "name" : "driver::0",
    "time" : {
      "start" : 1723428855317,
      "stop" : 1723428855375,
      "duration" : 58
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "labels" : [ {
    "name" : "epic",
    "value" : "Test Main Page regression_test"
  }, {
    "name" : "tag",
    "value" : "regression_test"
  }, {
    "name" : "parentSuite",
    "value" : "tests"
  }, {
    "name" : "suite",
    "value" : "main_page_test"
  }, {
    "name" : "subSuite",
    "value" : "TestMainPageRegression"
  }, {
    "name" : "host",
    "value" : "fv-az1501-607"
  }, {
    "name" : "thread",
    "value" : "2340-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "tests.main_page_test"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "history" : {
      "statistic" : {
        "failed" : 0,
        "broken" : 2,
        "skipped" : 0,
        "passed" : 78,
        "unknown" : 0,
        "total" : 80
      },
      "items" : [ {
        "uid" : "bcb510eae5a08749",
        "reportUrl" : "https://Nat754.github.io/DealerPassport/81//#testresult/bcb510eae5a08749",
        "status" : "passed",
        "time" : {
          "start" : 1723343060834,
          "stop" : 1723343062897,
          "duration" : 2063
        }
      }, {
        "uid" : "e0c7d84248450caf",
        "reportUrl" : "https://Nat754.github.io/DealerPassport/80//#testresult/e0c7d84248450caf",
        "status" : "passed",
        "time" : {
          "start" : 1723256334951,
          "stop" : 1723256337073,
          "duration" : 2122
        }
      }, {
        "uid" : "51200e4fc7435e81",
        "reportUrl" : "https://Nat754.github.io/DealerPassport/79//#testresult/51200e4fc7435e81",
        "status" : "passed",
        "time" : {
          "start" : 1723169950054,
          "stop" : 1723169952181,
          "duration" : 2127
        }
      }, {
        "uid" : "9882e5f19376421a",
        "reportUrl" : "https://Nat754.github.io/DealerPassport/78//#testresult/9882e5f19376421a",
        "status" : "passed",
        "time" : {
          "start" : 1723083541754,
          "stop" : 1723083543842,
          "duration" : 2088
        }
      }, {
        "uid" : "dca41fe6d9c68ef0",
        "reportUrl" : "https://Nat754.github.io/DealerPassport/77//#testresult/dca41fe6d9c68ef0",
        "status" : "passed",
        "time" : {
          "start" : 1722997134027,
          "stop" : 1722997136092,
          "duration" : 2065
        }
      }, {
        "uid" : "b9cd415a7822a030",
        "reportUrl" : "https://Nat754.github.io/DealerPassport/76//#testresult/b9cd415a7822a030",
        "status" : "passed",
        "time" : {
          "start" : 1722910613222,
          "stop" : 1722910615287,
          "duration" : 2065
        }
      }, {
        "uid" : "b1e79ebd8840e7a9",
        "reportUrl" : "https://Nat754.github.io/DealerPassport/75//#testresult/b1e79ebd8840e7a9",
        "status" : "passed",
        "time" : {
          "start" : 1722824371041,
          "stop" : 1722824373107,
          "duration" : 2066
        }
      }, {
        "uid" : "8903f40dbdfa0824",
        "reportUrl" : "https://Nat754.github.io/DealerPassport/74//#testresult/8903f40dbdfa0824",
        "status" : "passed",
        "time" : {
          "start" : 1722738087506,
          "stop" : 1722738089604,
          "duration" : 2098
        }
      }, {
        "uid" : "36e0a388d1a9d7aa",
        "reportUrl" : "https://Nat754.github.io/DealerPassport/73//#testresult/36e0a388d1a9d7aa",
        "status" : "passed",
        "time" : {
          "start" : 1722651275007,
          "stop" : 1722651277089,
          "duration" : 2082
        }
      }, {
        "uid" : "cb67045f775a2e66",
        "reportUrl" : "https://Nat754.github.io/DealerPassport/72//#testresult/cb67045f775a2e66",
        "status" : "passed",
        "time" : {
          "start" : 1722565207353,
          "stop" : 1722565209419,
          "duration" : 2066
        }
      }, {
        "uid" : "84966e4524e0e10",
        "reportUrl" : "https://Nat754.github.io/DealerPassport/71//#testresult/84966e4524e0e10",
        "status" : "passed",
        "time" : {
          "start" : 1722479064478,
          "stop" : 1722479066546,
          "duration" : 2068
        }
      }, {
        "uid" : "5f7dc35b4b9a8117",
        "reportUrl" : "https://Nat754.github.io/DealerPassport/70//#testresult/5f7dc35b4b9a8117",
        "status" : "passed",
        "time" : {
          "start" : 1722391014400,
          "stop" : 1722391016474,
          "duration" : 2074
        }
      }, {
        "uid" : "c711592431e1b260",
        "reportUrl" : "https://Nat754.github.io/DealerPassport/69//#testresult/c711592431e1b260",
        "status" : "passed",
        "time" : {
          "start" : 1722305814628,
          "stop" : 1722305816692,
          "duration" : 2064
        }
      }, {
        "uid" : "34a7ff002b83cdcf",
        "reportUrl" : "https://Nat754.github.io/DealerPassport/68//#testresult/34a7ff002b83cdcf",
        "status" : "passed",
        "time" : {
          "start" : 1722219535512,
          "stop" : 1722219537577,
          "duration" : 2065
        }
      }, {
        "uid" : "e31d2d04a81d8df8",
        "reportUrl" : "https://Nat754.github.io/DealerPassport/67//#testresult/e31d2d04a81d8df8",
        "status" : "passed",
        "time" : {
          "start" : 1722133269621,
          "stop" : 1722133271686,
          "duration" : 2065
        }
      }, {
        "uid" : "1366125df1e21785",
        "reportUrl" : "https://Nat754.github.io/DealerPassport/66//#testresult/1366125df1e21785",
        "status" : "passed",
        "time" : {
          "start" : 1722046442864,
          "stop" : 1722046444932,
          "duration" : 2068
        }
      }, {
        "uid" : "3c02f270a0f2b51b",
        "reportUrl" : "https://Nat754.github.io/DealerPassport/65//#testresult/3c02f270a0f2b51b",
        "status" : "passed",
        "time" : {
          "start" : 1721960124595,
          "stop" : 1721960126660,
          "duration" : 2065
        }
      }, {
        "uid" : "bf45c1d2918b30b",
        "reportUrl" : "https://Nat754.github.io/DealerPassport/64//#testresult/bf45c1d2918b30b",
        "status" : "passed",
        "time" : {
          "start" : 1721873834942,
          "stop" : 1721873837008,
          "duration" : 2066
        }
      }, {
        "uid" : "994b9e2d20b5a9dc",
        "reportUrl" : "https://Nat754.github.io/DealerPassport/63//#testresult/994b9e2d20b5a9dc",
        "status" : "passed",
        "time" : {
          "start" : 1721787370551,
          "stop" : 1721787372677,
          "duration" : 2126
        }
      }, {
        "uid" : "962091d8a2e0cd80",
        "reportUrl" : "https://Nat754.github.io/DealerPassport/62//#testresult/962091d8a2e0cd80",
        "status" : "passed",
        "time" : {
          "start" : 1721701041107,
          "stop" : 1721701043193,
          "duration" : 2086
        }
      } ]
    },
    "tags" : [ "regression_test" ]
  },
  "source" : "7aa16a7681354b87.json",
  "parameterValues" : [ ]
}