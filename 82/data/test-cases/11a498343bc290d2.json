{
  "uid" : "11a498343bc290d2",
  "name" : "test_open_seo[https://dealer-passport-test.xsfera.ru/logs/]",
  "fullName" : "tests.main_page_test.TestMainPageSmoke#test_open_seo",
  "historyId" : "12f486fa9f4b36e9e84d73f1b7d49a13",
  "time" : {
    "start" : 1723428628538,
    "stop" : 1723428628538,
    "duration" : 0
  },
  "status" : "broken",
  "statusMessage" : "selenium.common.exceptions.InvalidCookieDomainException: Message: invalid cookie domain\n  (Session info: chrome-headless-shell=127.0.6533.88)\nStacktrace:\n#0 0x55922d30d71a <unknown>\n#1 0x55922cfde481 <unknown>\n#2 0x55922d080e51 <unknown>\n#3 0x55922d0508e2 <unknown>\n#4 0x55922d06f08a <unknown>\n#5 0x55922d050683 <unknown>\n#6 0x55922d020d71 <unknown>\n#7 0x55922d0217de <unknown>\n#8 0x55922d2d52ab <unknown>\n#9 0x55922d2d9242 <unknown>\n#10 0x55922d2c2665 <unknown>\n#11 0x55922d2d9dd2 <unknown>\n#12 0x55922d2a72af <unknown>\n#13 0x55922d2fceb8 <unknown>\n#14 0x55922d2fd090 <unknown>\n#15 0x55922d30c4ec <unknown>\n#16 0x7fe7ab294ac3 <unknown>",
  "statusTrace" : "driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"630d9d8b03bf2aca830f90054b15b5a6\")>\n\n    @pytest.fixture\n    def auth_user_admin_to_seo(driver):\n        main_page = MainPage(driver)\n        url = Urls.MAIN_URL_SEO + Urls.AUTH\n        cookies = {'name': 'token', 'value': os.environ[\"SEO_ADMIN\"]}\n        driver.get(url)\n>       driver.add_cookie(cookies)\n\ntests/conftest.py:16: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:636: in add_cookie\n    self.execute(Command.ADD_COOKIE, {\"cookie\": cookie_dict})\n/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:347: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f04e1c34f80>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"invalid cookie domain\",\"message\":\"invalid cookie domain\\\\n  (Session info...\\\\n#14 0x55922d2fd090 \\\\u003Cunknown>\\\\n#15 0x55922d30c4ec \\\\u003Cunknown>\\\\n#16 0x7fe7ab294ac3 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.InvalidCookieDomainException: Message: invalid cookie domain\nE         (Session info: chrome-headless-shell=127.0.6533.88)\nE       Stacktrace:\nE       #0 0x55922d30d71a <unknown>\nE       #1 0x55922cfde481 <unknown>\nE       #2 0x55922d080e51 <unknown>\nE       #3 0x55922d0508e2 <unknown>\nE       #4 0x55922d06f08a <unknown>\nE       #5 0x55922d050683 <unknown>\nE       #6 0x55922d020d71 <unknown>\nE       #7 0x55922d0217de <unknown>\nE       #8 0x55922d2d52ab <unknown>\nE       #9 0x55922d2d9242 <unknown>\nE       #10 0x55922d2c2665 <unknown>\nE       #11 0x55922d2d9dd2 <unknown>\nE       #12 0x55922d2a72af <unknown>\nE       #13 0x55922d2fceb8 <unknown>\nE       #14 0x55922d2fd090 <unknown>\nE       #15 0x55922d30c4ec <unknown>\nE       #16 0x7fe7ab294ac3 <unknown>\n\n/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/site-packages/selenium/webdriver/remote/errorhandler.py:229: InvalidCookieDomainException",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "auth_user_admin_to_seo",
    "time" : {
      "start" : 1723428628736,
      "stop" : 1723428629065,
      "duration" : 329
    },
    "status" : "broken",
    "statusMessage" : "selenium.common.exceptions.InvalidCookieDomainException: Message: invalid cookie domain\n  (Session info: chrome-headless-shell=127.0.6533.88)\nStacktrace:\n#0 0x55922d30d71a <unknown>\n#1 0x55922cfde481 <unknown>\n#2 0x55922d080e51 <unknown>\n#3 0x55922d0508e2 <unknown>\n#4 0x55922d06f08a <unknown>\n#5 0x55922d050683 <unknown>\n#6 0x55922d020d71 <unknown>\n#7 0x55922d0217de <unknown>\n#8 0x55922d2d52ab <unknown>\n#9 0x55922d2d9242 <unknown>\n#10 0x55922d2c2665 <unknown>\n#11 0x55922d2d9dd2 <unknown>\n#12 0x55922d2a72af <unknown>\n#13 0x55922d2fceb8 <unknown>\n#14 0x55922d2fd090 <unknown>\n#15 0x55922d30c4ec <unknown>\n#16 0x7fe7ab294ac3 <unknown>\n\n",
    "statusTrace" : "  File \"/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/site-packages/pluggy/_callers.py\", line 167, in _multicall\n    teardown.throw(outcome._exception)\n  File \"/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/site-packages/_pytest/setuponly.py\", line 36, in pytest_fixture_setup\n    return (yield)\n            ^^^^^\n  File \"/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/site-packages/pluggy/_callers.py\", line 103, in _multicall\n    res = hook_impl.function(*args)\n          ^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/site-packages/_pytest/fixtures.py\", line 1140, in pytest_fixture_setup\n    result = call_fixture_func(fixturefunc, request, kwargs)\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/site-packages/_pytest/fixtures.py\", line 917, in call_fixture_func\n    fixture_result = fixturefunc(**kwargs)\n                     ^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/work/DealerPassport/DealerPassport/tests/conftest.py\", line 16, in auth_user_admin_to_seo\n    driver.add_cookie(cookies)\n  File \"/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py\", line 636, in add_cookie\n    self.execute(Command.ADD_COOKIE, {\"cookie\": cookie_dict})\n  File \"/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py\", line 347, in execute\n    self.error_handler.check_response(response)\n  File \"/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/site-packages/selenium/webdriver/remote/errorhandler.py\", line 229, in check_response\n    raise exception_class(message, screen, stacktrace)\n",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  }, {
    "name" : "driver",
    "time" : {
      "start" : 1723428628538,
      "stop" : 1723428628735,
      "duration" : 197
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "clear_allure_results_folder",
    "time" : {
      "start" : 1723428577028,
      "stop" : 1723428577028,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "afterStages" : [ {
    "name" : "driver::0",
    "time" : {
      "start" : 1723428629098,
      "stop" : 1723428629157,
      "duration" : 59
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "labels" : [ {
    "name" : "epic",
    "value" : "Test Main Page smoke_test"
  }, {
    "name" : "tag",
    "value" : "smoke_test"
  }, {
    "name" : "parentSuite",
    "value" : "tests"
  }, {
    "name" : "suite",
    "value" : "main_page_test"
  }, {
    "name" : "subSuite",
    "value" : "TestMainPageSmoke"
  }, {
    "name" : "host",
    "value" : "fv-az1501-607"
  }, {
    "name" : "thread",
    "value" : "2340-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "tests.main_page_test"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "url",
    "value" : "'https://dealer-passport-test.xsfera.ru/logs/'"
  } ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "history" : {
      "statistic" : {
        "failed" : 3,
        "broken" : 10,
        "skipped" : 0,
        "passed" : 67,
        "unknown" : 0,
        "total" : 80
      },
      "items" : [ {
        "uid" : "48b1278e336b708d",
        "reportUrl" : "https://Nat754.github.io/DealerPassport/81//#testresult/48b1278e336b708d",
        "status" : "passed",
        "time" : {
          "start" : 1723342431234,
          "stop" : 1723342442225,
          "duration" : 10991
        }
      }, {
        "uid" : "18ba97cf83c1ec8b",
        "reportUrl" : "https://Nat754.github.io/DealerPassport/80//#testresult/18ba97cf83c1ec8b",
        "status" : "passed",
        "time" : {
          "start" : 1723255704280,
          "stop" : 1723255715237,
          "duration" : 10957
        }
      }, {
        "uid" : "244a31ce71c4deb1",
        "reportUrl" : "https://Nat754.github.io/DealerPassport/79//#testresult/244a31ce71c4deb1",
        "status" : "failed",
        "statusDetails" : "AssertionError: Ошибка: ['Произошла ошибка: Неизвестная ошибка сервера\\nПроизошла ошибка: Неизвестная ошибка сервера']\nassert None\n +  where None = <bound method MainPage.check_not_errors of <pages.main_page.MainPage object at 0x7f95c72345c0>>()\n +    where <bound method MainPage.check_not_errors of <pages.main_page.MainPage object at 0x7f95c72345c0>> = <pages.main_page.MainPage object at 0x7f95c72345c0>.check_not_errors",
        "time" : {
          "start" : 1723169371110,
          "stop" : 1723169381430,
          "duration" : 10320
        }
      }, {
        "uid" : "4fe62d33c838a15d",
        "reportUrl" : "https://Nat754.github.io/DealerPassport/78//#testresult/4fe62d33c838a15d",
        "status" : "passed",
        "time" : {
          "start" : 1723082909505,
          "stop" : 1723082920466,
          "duration" : 10961
        }
      }, {
        "uid" : "6d6d2b6526256eda",
        "reportUrl" : "https://Nat754.github.io/DealerPassport/77//#testresult/6d6d2b6526256eda",
        "status" : "passed",
        "time" : {
          "start" : 1722996555929,
          "stop" : 1722996566718,
          "duration" : 10789
        }
      }, {
        "uid" : "125f63ccfe945a05",
        "reportUrl" : "https://Nat754.github.io/DealerPassport/76//#testresult/125f63ccfe945a05",
        "status" : "failed",
        "statusDetails" : "AssertionError: Ошибка: ['Произошла ошибка: Неизвестная ошибка сервера\\nПроизошла ошибка: Неизвестная ошибка сервера\\nПроизошла ошибка: Неизвестная ошибка сервера']\nassert None\n +  where None = <bound method MainPage.check_not_errors of <pages.main_page.MainPage object at 0x7f4f5c474500>>()\n +    where <bound method MainPage.check_not_errors of <pages.main_page.MainPage object at 0x7f4f5c474500>> = <pages.main_page.MainPage object at 0x7f4f5c474500>.check_not_errors",
        "time" : {
          "start" : 1722910027708,
          "stop" : 1722910037592,
          "duration" : 9884
        }
      }, {
        "uid" : "722a0e19f2401802",
        "reportUrl" : "https://Nat754.github.io/DealerPassport/75//#testresult/722a0e19f2401802",
        "status" : "passed",
        "time" : {
          "start" : 1722823751488,
          "stop" : 1722823762362,
          "duration" : 10874
        }
      }, {
        "uid" : "d5fbb6777da2d8c8",
        "reportUrl" : "https://Nat754.github.io/DealerPassport/74//#testresult/d5fbb6777da2d8c8",
        "status" : "passed",
        "time" : {
          "start" : 1722737495550,
          "stop" : 1722737506360,
          "duration" : 10810
        }
      }, {
        "uid" : "39071047a86aa998",
        "reportUrl" : "https://Nat754.github.io/DealerPassport/73//#testresult/39071047a86aa998",
        "status" : "passed",
        "time" : {
          "start" : 1722650693746,
          "stop" : 1722650704514,
          "duration" : 10768
        }
      }, {
        "uid" : "cc201b9094a7e178",
        "reportUrl" : "https://Nat754.github.io/DealerPassport/72//#testresult/cc201b9094a7e178",
        "status" : "broken",
        "statusDetails" : "selenium.common.exceptions.TimeoutException: Message: \nStacktrace:\n#0 0x557cdacb5c5a <unknown>\n#1 0x557cda998e2c <unknown>\n#2 0x557cda9e5661 <unknown>\n#3 0x557cda9e5751 <unknown>\n#4 0x557cdaa29f64 <unknown>\n#5 0x557cdaa085ed <unknown>\n#6 0x557cdaa27303 <unknown>\n#7 0x557cdaa08363 <unknown>\n#8 0x557cda9d8247 <unknown>\n#9 0x557cda9d8b9e <unknown>\n#10 0x557cdac7c22b <unknown>\n#11 0x557cdac802d1 <unknown>\n#12 0x557cdac67ade <unknown>\n#13 0x557cdac80e32 <unknown>\n#14 0x557cdac4c77f <unknown>\n#15 0x557cdaca5618 <unknown>\n#16 0x557cdaca57f0 <unknown>\n#17 0x557cdacb4d8c <unknown>\n#18 0x7ff49aa94ac3 <unknown>",
        "time" : {
          "start" : 1722564630751,
          "stop" : 1722564630751,
          "duration" : 0
        }
      }, {
        "uid" : "921c77d01daec407",
        "reportUrl" : "https://Nat754.github.io/DealerPassport/71//#testresult/921c77d01daec407",
        "status" : "passed",
        "time" : {
          "start" : 1722478431751,
          "stop" : 1722478442689,
          "duration" : 10938
        }
      }, {
        "uid" : "1d08694e8d342381",
        "reportUrl" : "https://Nat754.github.io/DealerPassport/70//#testresult/1d08694e8d342381",
        "status" : "passed",
        "time" : {
          "start" : 1722390399727,
          "stop" : 1722390410639,
          "duration" : 10912
        }
      }, {
        "uid" : "3aea2e01b5a67a60",
        "reportUrl" : "https://Nat754.github.io/DealerPassport/69//#testresult/3aea2e01b5a67a60",
        "status" : "failed",
        "statusDetails" : "AssertionError: Ошибка: ['Произошла ошибка: Неизвестная ошибка сервера']\nassert None\n +  where None = <bound method MainPage.check_not_errors of <pages.main_page.MainPage object at 0x7f4931c61e50>>()\n +    where <bound method MainPage.check_not_errors of <pages.main_page.MainPage object at 0x7f4931c61e50>> = <pages.main_page.MainPage object at 0x7f4931c61e50>.check_not_errors",
        "time" : {
          "start" : 1722305206564,
          "stop" : 1722305216469,
          "duration" : 9905
        }
      }, {
        "uid" : "61ab938aa17f6a50",
        "reportUrl" : "https://Nat754.github.io/DealerPassport/68//#testresult/61ab938aa17f6a50",
        "status" : "passed",
        "time" : {
          "start" : 1722218958671,
          "stop" : 1722218969520,
          "duration" : 10849
        }
      }, {
        "uid" : "d15ac1178177f217",
        "reportUrl" : "https://Nat754.github.io/DealerPassport/67//#testresult/d15ac1178177f217",
        "status" : "passed",
        "time" : {
          "start" : 1722132678240,
          "stop" : 1722132689120,
          "duration" : 10880
        }
      }, {
        "uid" : "527a1b8ae5fa486a",
        "reportUrl" : "https://Nat754.github.io/DealerPassport/66//#testresult/527a1b8ae5fa486a",
        "status" : "passed",
        "time" : {
          "start" : 1722045862679,
          "stop" : 1722045873501,
          "duration" : 10822
        }
      }, {
        "uid" : "d2310d420486ea55",
        "reportUrl" : "https://Nat754.github.io/DealerPassport/65//#testresult/d2310d420486ea55",
        "status" : "passed",
        "time" : {
          "start" : 1721959545729,
          "stop" : 1721959556524,
          "duration" : 10795
        }
      }, {
        "uid" : "1548aa37a5bd2894",
        "reportUrl" : "https://Nat754.github.io/DealerPassport/64//#testresult/1548aa37a5bd2894",
        "status" : "passed",
        "time" : {
          "start" : 1721873202518,
          "stop" : 1721873213472,
          "duration" : 10954
        }
      }, {
        "uid" : "d06ea161feb3f921",
        "reportUrl" : "https://Nat754.github.io/DealerPassport/63//#testresult/d06ea161feb3f921",
        "status" : "passed",
        "time" : {
          "start" : 1721786789335,
          "stop" : 1721786800191,
          "duration" : 10856
        }
      }, {
        "uid" : "332b6b82feb23630",
        "reportUrl" : "https://Nat754.github.io/DealerPassport/62//#testresult/332b6b82feb23630",
        "status" : "passed",
        "time" : {
          "start" : 1721700429827,
          "stop" : 1721700440762,
          "duration" : 10935
        }
      } ]
    },
    "tags" : [ "smoke_test" ]
  },
  "source" : "11a498343bc290d2.json",
  "parameterValues" : [ "'https://dealer-passport-test.xsfera.ru/logs/'" ]
}